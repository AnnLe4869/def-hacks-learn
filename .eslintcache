[{"D:\\Projects\\def-hacks-learn\\src\\index.js":"1","D:\\Projects\\def-hacks-learn\\src\\pages\\NotFound.js":"2","D:\\Projects\\def-hacks-learn\\src\\pages\\ExistAccount.js":"3","D:\\Projects\\def-hacks-learn\\src\\components\\common\\Navbar.js":"4","D:\\Projects\\def-hacks-learn\\src\\components\\authscreens\\Signup.js":"5","D:\\Projects\\def-hacks-learn\\src\\pages\\Course-Components\\videoPlayer.js":"6","D:\\Projects\\def-hacks-learn\\src\\pages\\Course-Components\\outputPanel.js":"7"},{"size":367,"mtime":1605148082234,"results":"8","hashOfConfig":"9"},{"size":676,"mtime":1605755488892,"results":"10","hashOfConfig":"9"},{"size":6641,"mtime":1606160868725,"results":"11","hashOfConfig":"9"},{"size":3653,"mtime":1606333557031,"results":"12","hashOfConfig":"9"},{"size":6129,"mtime":1605487400588,"results":"13","hashOfConfig":"9"},{"size":1540,"mtime":1605755488865,"results":"14","hashOfConfig":"9"},{"size":890,"mtime":1605490871129,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4lvz3s",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\def-hacks-learn\\src\\index.js",[],"D:\\Projects\\def-hacks-learn\\src\\pages\\NotFound.js",[],"D:\\Projects\\def-hacks-learn\\src\\pages\\ExistAccount.js",[],"D:\\Projects\\def-hacks-learn\\src\\components\\common\\Navbar.js",["31"],"import React, { useState } from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport SearchIcon from '@material-ui/icons/Search';\nimport '../../styles/navbar.css';\nimport Autosuggest from 'react-autosuggest';\nimport firebase from '../firebase/base';\n\nfunction Navigation() {\n  const [items, setItems] = useState([]);\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      await firebase.db\n        .collection('characters')\n        .get()\n        .then((querySnapshot) => {\n          setItems(querySnapshot.docs.map((doc) => doc.data()));\n        });\n    };\n\n    return fetchData();\n  }, []);\n\n  const getSuggestions = (value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0\n      ? []\n      : items.filter(\n          (lang) =>\n            lang.characterName.toLowerCase().slice(0, inputLength) ===\n            inputValue\n        );\n  };\n\n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = (suggestion) => suggestion.characterName;\n\n  // Use your imagination to render suggestions.\n  const renderSuggestion = (suggestion) => (\n    <div>{suggestion.characterName}</div>\n  );\n  const onChange = (event, { newValue }) => {\n    setValue(newValue);\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  const onSuggestionsFetchRequested = ({ value }) => {\n    setSuggestions(getSuggestions(value));\n  };\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n  const inputProps = {\n    placeholder: 'Search...',\n    value,\n    onChange: onChange,\n  };\n\n  return (\n    <>\n      <Navbar bg=\"white\" className=\"sticky-top\" id=\"app_navbar\">\n        <Navbar.Brand href=\"/\">\n          <img\n            alt=\"logo\"\n            src=\"/assets/logo.png\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/dashboard\">Home</Nav.Link>\n          <Nav.Link href=\"/explore\">Explore</Nav.Link>\n        </Nav>\n\n        <Autosuggest\n          className=\"center-search\"\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n\n        <SearchIcon className=\"search\" style={{ fontSize: 32 }} />\n\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"/About\">About</Nav.Link>\n          <NavDropdown title=\"Account\" id=\"basic-nav-dropdown\">\n            {loggedIn ? (\n              <>\n                <NavDropdown.Item href=\"/profile\">Profile</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"/signout\">Logout</NavDropdown.Item>\n              </>\n            ) : (\n              <>\n                <NavDropdown.Item href=\"/signin\">Login</NavDropdown.Item>\n                <NavDropdown.Item href=\"/signup\">Register</NavDropdown.Item>\n              </>\n            )}\n          </NavDropdown>\n        </Nav>\n      </Navbar>\n    </>\n  );\n}\n\nexport default Navigation;\n","D:\\Projects\\def-hacks-learn\\src\\components\\authscreens\\Signup.js",[],"D:\\Projects\\def-hacks-learn\\src\\pages\\Course-Components\\videoPlayer.js",[],"D:\\Projects\\def-hacks-learn\\src\\pages\\Course-Components\\outputPanel.js",[],{"ruleId":"32","severity":1,"message":"33","line":13,"column":20,"nodeType":"34","messageId":"35","endLine":13,"endColumn":31},"no-unused-vars","'setLoggedIn' is assigned a value but never used.","Identifier","unusedVar"]